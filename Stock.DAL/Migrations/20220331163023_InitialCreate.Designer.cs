// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stock.DAL;

#nullable disable

namespace Stock.DAL.Migrations
{
    [DbContext(typeof(DBLogHermesContext))]
    [Migration("20220331163023_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Contenir", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Contenir__6BC89515D75B7C29");

                    b.HasIndex("Id1");

                    b.ToTable("Contenir", (string)null);
                });

            modelBuilder.Entity("Créer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Créer__6BC89515D0C0851C");

                    b.HasIndex("Id1");

                    b.ToTable("Créer", (string)null);
                });

            modelBuilder.Entity("Editer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Editer__6BC89515AF141620");

                    b.HasIndex("Id1");

                    b.ToTable("Editer", (string)null);
                });

            modelBuilder.Entity("Enregistrer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Enregist__6BC89515E9B0FCD9");

                    b.HasIndex("Id1");

                    b.ToTable("Enregistrer", (string)null);
                });

            modelBuilder.Entity("Inscrire", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Inscrire__6BC8951525E9FA03");

                    b.HasIndex("Id1");

                    b.ToTable("Inscrire", (string)null);
                });

            modelBuilder.Entity("Livrer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Livrer__6BC89515572A9E3D");

                    b.HasIndex("Id1");

                    b.ToTable("Livrer", (string)null);
                });

            modelBuilder.Entity("Organiser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Organise__6BC8951518A76114");

                    b.HasIndex("Id1");

                    b.ToTable("Organiser", (string)null);
                });

            modelBuilder.Entity("Réaliser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Réaliser__6BC89515174D4FB1");

                    b.HasIndex("Id1");

                    b.ToTable("Réaliser", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Article", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Annee")
                        .HasColumnType("date")
                        .HasColumnName("annee");

                    b.Property<string>("Cepage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cepage");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("description");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(350)
                        .HasColumnType("binary(350)")
                        .HasColumnName("image")
                        .IsFixedLength();

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.Property<decimal?>("Note")
                        .HasColumnType("decimal(2,2)")
                        .HasColumnName("note");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("prix");

                    b.Property<int?>("Quantite")
                        .HasColumnType("int")
                        .HasColumnName("quantite");

                    b.Property<decimal?>("Taxe")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("taxe");

                    b.HasKey("Id");

                    b.HasIndex("Id1");

                    b.ToTable("ARTICLE", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nature")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("nature");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("CATEGORIE", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CodePostal")
                        .HasColumnType("int")
                        .HasColumnName("codePostal");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.Property<string>("NumSiret")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("num_siret");

                    b.Property<string>("NumTva")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("num_TVA");

                    b.Property<string>("Pays")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pays");

                    b.Property<string>("Prenom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prenom");

                    b.Property<string>("Rue")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("rue");

                    b.Property<string>("Telephone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telephone");

                    b.Property<string>("Ville")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ville");

                    b.HasKey("Id");

                    b.HasIndex("Id1");

                    b.ToTable("CLIENT", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.CmdClient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateCmd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCmd");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("date")
                        .HasColumnName("dateLivraison");

                    b.Property<string>("Devise")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("devise");

                    b.Property<string>("Etat")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("etat");

                    b.Property<string>("Libelle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("libelle");

                    b.Property<string>("LieuLivraison")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lieuLivraison");

                    b.Property<string>("ModePaiement")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("modePaiement");

                    b.Property<decimal?>("MontantCmd")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("montantCmd");

                    b.HasKey("Id");

                    b.ToTable("CMD_CLIENT", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.CmdFournisseur", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateCmd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCmd");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("datetime")
                        .HasColumnName("dateLivraison");

                    b.Property<string>("Libelle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("libelle");

                    b.Property<string>("ModePaiement")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("modePaiement");

                    b.Property<decimal?>("MontantCmd")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("montantCmd");

                    b.Property<decimal?>("PrixAchatHt")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("prixAchatHT");

                    b.Property<decimal?>("Taxe")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("taxe");

                    b.HasKey("Id");

                    b.ToTable("CMD_FOURNISSEUR", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Correspondre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.Property<decimal?>("PrixVente")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("prixVente");

                    b.Property<int?>("SortieStock")
                        .HasColumnType("int")
                        .HasColumnName("sortieStock");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Correspo__6BC89515B6C4D951");

                    b.HasIndex("Id1");

                    b.ToTable("Correspondre", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.EmplacementStock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("NumCasier")
                        .HasColumnType("int")
                        .HasColumnName("numCasier");

                    b.Property<int?>("NumRang")
                        .HasColumnType("int")
                        .HasColumnName("numRang");

                    b.HasKey("Id");

                    b.ToTable("EMPLACEMENT_STOCK", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Employe", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prenom");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("EMPLOYE", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Facture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateFacture")
                        .HasColumnType("datetime")
                        .HasColumnName("dateFacture");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.Property<string>("Libelle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("libelle");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("montant");

                    b.HasKey("Id");

                    b.HasIndex("Id1");

                    b.ToTable("FACTURE", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CodePostal")
                        .HasColumnType("int")
                        .HasColumnName("codePostal");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.Property<string>("NumSiret")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("num_siret");

                    b.Property<string>("NumTva")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("num_TVA");

                    b.Property<string>("Pays")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pays");

                    b.Property<string>("Rue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rue");

                    b.Property<string>("Telephone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telephone");

                    b.Property<string>("Ville")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ville");

                    b.HasKey("Id");

                    b.ToTable("FOURNISSEUR", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Receptionner", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.Property<int?>("EntreeStock")
                        .HasColumnType("int")
                        .HasColumnName("entreeStock");

                    b.Property<decimal?>("PrixAchat")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("prixAchat");

                    b.HasKey("Id", "Id1")
                        .HasName("PK__Receptio__6BC8951514B79B67");

                    b.HasIndex("Id1");

                    b.ToTable("Receptionner", (string)null);
                });

            modelBuilder.Entity("Stock.DAL.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id_1");

                    b.Property<string>("MotDePasse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mot_de_passe");

                    b.Property<string>("NomUtilisateur")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nomUtilisateur");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id1" }, "UQ__UTILISAT__9DB7D2A55BEC1EE9")
                        .IsUnique();

                    b.ToTable("UTILISATEUR", (string)null);
                });

            modelBuilder.Entity("Contenir", b =>
                {
                    b.HasOne("Stock.DAL.Article", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Contenir__id__4BAC3F29");

                    b.HasOne("Stock.DAL.EmplacementStock", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Contenir__id_1__4CA06362");
                });

            modelBuilder.Entity("Créer", b =>
                {
                    b.HasOne("Stock.DAL.Fournisseur", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Créer__id__571DF1D5");

                    b.HasOne("Stock.DAL.Employe", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Créer__id_1__5812160E");
                });

            modelBuilder.Entity("Editer", b =>
                {
                    b.HasOne("Stock.DAL.Facture", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Editer__id__47DBAE45");

                    b.HasOne("Stock.DAL.Employe", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Editer__id_1__48CFD27E");
                });

            modelBuilder.Entity("Enregistrer", b =>
                {
                    b.HasOne("Stock.DAL.Article", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Enregistrer__id__5AEE82B9");

                    b.HasOne("Stock.DAL.Employe", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Enregistre__id_1__5BE2A6F2");
                });

            modelBuilder.Entity("Inscrire", b =>
                {
                    b.HasOne("Stock.DAL.Client", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Inscrire__id__534D60F1");

                    b.HasOne("Stock.DAL.Employe", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Inscrire__id_1__5441852A");
                });

            modelBuilder.Entity("Livrer", b =>
                {
                    b.HasOne("Stock.DAL.Fournisseur", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Livrer__id__403A8C7D");

                    b.HasOne("Stock.DAL.CmdFournisseur", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Livrer__id_1__412EB0B6");
                });

            modelBuilder.Entity("Organiser", b =>
                {
                    b.HasOne("Stock.DAL.Employe", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Organiser__id__4F7CD00D");

                    b.HasOne("Stock.DAL.EmplacementStock", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Organiser__id_1__5070F446");
                });

            modelBuilder.Entity("Réaliser", b =>
                {
                    b.HasOne("Stock.DAL.Employe", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Réaliser__id__5EBF139D");

                    b.HasOne("Stock.DAL.CmdFournisseur", null)
                        .WithMany()
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Réaliser__id_1__5FB337D6");
                });

            modelBuilder.Entity("Stock.DAL.Article", b =>
                {
                    b.HasOne("Stock.DAL.Categorie", "Id1Navigation")
                        .WithMany("Articles")
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__ARTICLE__id_1__36B12243");

                    b.Navigation("Id1Navigation");
                });

            modelBuilder.Entity("Stock.DAL.Client", b =>
                {
                    b.HasOne("Stock.DAL.CmdClient", "Id1Navigation")
                        .WithMany("Clients")
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__CLIENT__id_1__398D8EEE");

                    b.Navigation("Id1Navigation");
                });

            modelBuilder.Entity("Stock.DAL.Correspondre", b =>
                {
                    b.HasOne("Stock.DAL.Article", "IdNavigation")
                        .WithMany("Correspondres")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Correspondre__id__440B1D61");

                    b.HasOne("Stock.DAL.CmdClient", "Id1Navigation")
                        .WithMany("Correspondres")
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Correspond__id_1__44FF419A");

                    b.Navigation("Id1Navigation");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Stock.DAL.Facture", b =>
                {
                    b.HasOne("Stock.DAL.CmdClient", "Id1Navigation")
                        .WithMany("Factures")
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__FACTURE__id_1__2A4B4B5E");

                    b.Navigation("Id1Navigation");
                });

            modelBuilder.Entity("Stock.DAL.Receptionner", b =>
                {
                    b.HasOne("Stock.DAL.Article", "IdNavigation")
                        .WithMany("Receptionners")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__Receptionner__id__3C69FB99");

                    b.HasOne("Stock.DAL.CmdFournisseur", "Id1Navigation")
                        .WithMany("Receptionners")
                        .HasForeignKey("Id1")
                        .IsRequired()
                        .HasConstraintName("FK__Receptionn__id_1__3D5E1FD2");

                    b.Navigation("Id1Navigation");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Stock.DAL.Utilisateur", b =>
                {
                    b.HasOne("Stock.DAL.Employe", "Id1Navigation")
                        .WithOne("Utilisateur")
                        .HasForeignKey("Stock.DAL.Utilisateur", "Id1")
                        .IsRequired()
                        .HasConstraintName("FK__UTILISATEU__id_1__33D4B598");

                    b.Navigation("Id1Navigation");
                });

            modelBuilder.Entity("Stock.DAL.Article", b =>
                {
                    b.Navigation("Correspondres");

                    b.Navigation("Receptionners");
                });

            modelBuilder.Entity("Stock.DAL.Categorie", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Stock.DAL.CmdClient", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Correspondres");

                    b.Navigation("Factures");
                });

            modelBuilder.Entity("Stock.DAL.CmdFournisseur", b =>
                {
                    b.Navigation("Receptionners");
                });

            modelBuilder.Entity("Stock.DAL.Employe", b =>
                {
                    b.Navigation("Utilisateur")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
